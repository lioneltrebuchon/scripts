%% Sartup for python site-packages
% <package>.install() need to exist
% return (True/False, ErrMessage)
[~, pyExe, pyLoaded] = pyversion;
uc = UserConfig();
if ~pyLoaded
    if ~exist(uc.PythonHomeExe,'file')
        pypth_ = fileparts(uc.PythonHomeExe);
        pyexsp_ = fullfile(pypth_,'Scripts','python.exe');
        pyexsp_w = fullfile(pypth_,'Scripts','pythonw.exe');
        if exist(pyexsp_, 'file') && exist(pyexsp_w, 'file')
            pyex_w = fullfile(pypth_,'pythonw.exe');
            fprintf('[INFO] ')
            [st1] = system(['mklink /H "' uc.PythonHomeExe '" "' pyexsp_ '"']);
            fprintf('[INFO] ')
            [st2] = system(['mklink /H "' pyex_w '" "' pyexsp_w '"']);
            if st1~=0 || st2~=0
                fprintf('[WARNING] failed to mklink Python executable "%s", aborting\n',uc.PythonHomeExe)
                fprintf('\tcheck the user configuration\n')
                return
            end
        else
            fprintf('[WARNING] Python executable "%s" does not exist, aborting\n',uc.PythonHomeExe)
            fprintf('\tadapt the user configuration\n')
            return
        end
    end
    [~, pyExe, pyLoaded] = pyversion(uc.PythonHomeExe);
end
if strfind(lower(char(py.sys.version)), 'continuum analytics')
    splt_path = strsplit(getenv('Path'), ';');
    new_path = {};
    for k=1:length(splt_path)
        if strfind(lower(splt_path{k}), 'conda'); continue; end
        new_path = [new_path;splt_path(k)];
    end
    setenv('Path', strjoin(new_path, ';'))
end
if ~strcmp(pyExe, uc.PythonHomeExe)
    warning('python executable differs:\n\tpyversion: %s\n\tuser configuration: %s\n--> restart Matlab and call startup scripts again', pyExe, uc.PythonHomeExe)
end
[pyVer,pyPth] = pyversion;
if ~exist(pyPth,'file')
    fprintf('[WARNING] Python executable "%s" does not exist\n',pyPth)
    fprintf('\tadapt the user configuration\n')
    return
end
% Test Matlab version
if ~strcmp(pyVer,'2.7')
    fprintf('[WARNING] Python version "%s" is not supported.\n',pyVer)
    fprintf('\tadapt the user configuration\n')
    return
end
% add folder to path
fprintf('\t* adding python path: ')
try
    pypth = py.sys.path;
    pypthP = cellfun(@char,cell(pypth),'UniformOutput',false);
    if ~any(strcmp(pwd,pypthP))
        append(pypth,pwd) % python list append
    end
    fprintf('passed\n')
catch ME
    fprintf('failed\n')
    fprintf(['[WARNING] ' ME.message '\n'])
    return
end
% going through packages
dir_ = dir();
success_all = true;
% py.reload(py.importlib.import_module(MyModuleName)), not supported by matlab yet
for k=1:length(dir_)
    if dir_(k).isdir && isempty(regexp(dir_(k).name,'^\..*','once'))
        fprintf('\t* loading "%s": ',dir_(k).name)
        try
            tmp = cell(py.(dir_(k).name).install('palio3'));
            success = tmp{1};
            errMe = char(tmp{2});
        catch ME
            errMe = ME.message;
            success = false;
        end
        success_all = success_all && success;
        if success
            fprintf('passed\n')
        else
            fprintf('failed\n')
        end
        if ~isempty(errMe)
            fprintf(['[WARNING] ' errMe '\n'])
        end
    end
end
if ~success_all
    fprintf('\n[WARNING] some python site-packages failed to load!\n')
end
clear dir_ errMe k new_path pyExe pyLoaded pyPth pypth pypthP pyVer splt_path success success_all tmp uc
