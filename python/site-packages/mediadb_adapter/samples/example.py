#!/usr/bin/env python
"""Connection test with all repositories defined in "repository.json"
"""

import sys
import os
import logging
import json

logging.basicConfig(format='[%(levelname)s] %(name)s.%(funcName)s(): %(message)s', level=logging.INFO)

# insert root path (this should not be used from outside)
sys.path.insert(0, os.path.abspath(os.path.join('..', '..')))

import mediadb_adapter


###############################################################################
def test_connections():
    log = logging.getLogger(__name__)
    log.info('testing connection')
    mdb_adp = mediadb_adapter.clients.MediaDatabase(database='MediaDB', adapter='mssql')
    return mdb_adp.test()


def test_packages():
    log = logging.getLogger(__name__)
    log.info('testing packages queries')
    mdb_adp = mediadb_adapter.clients.MediaDatabase(database='MediaDB')
    package = mediadb_adapter.tables.Package(client=mdb_adp)
    package.fromId(525)
    print package
    tracks = package.getTracks()
    print tracks[0]
    # print "found %i tracks" % len(tracks)
    # extracts = package.getExtracts()
    # print "found %i extracts" % len(extracts)
    # satellites = package.getSatellites()
    # print "found %i satellites" % len(satellites)
    # ####
    # pack_ = mediadb_adapter.tables.Package(track=tracks[0])
    # print pack_ == package
    # track = mediadb_adapter.tables.Track(mdb_adp)
    # track.fromPackage(package)
    # print track
    # nprint(track.getTypes())
    # track_type = mediadb_adapter.tables.TrackType(mdb_adp)
    # track_type.fromTrack(track)
    # print track_type
    # nprint(track_type.getTypes())
    return True


# def main_find_nicole_bte_ite(srv):
#     query = 'SELECT P.PackageID FROM Package AS P INNER JOIN PhonakUser AS U ON P.CreatorOID=U.OID WHERE U.UserFistName=\'Nicole\' AND P.SatelliteStyle=\'BTE&ITE\';'
#     res = srv.get(query, as_dict=False)
#     res = unique(res)
#     # nprint(res)
#     lst = list()
#     for item in res:
#         lst.append(item[0])
#     nprint(lst)


# def main_find_all_tracktypes(srv):
#     query = 'SELECT Tt.Name FROM Package AS P INNER JOIN Track AS T ON P.OID=T.PackageOID INNER JOIN TrackType AS Tt ON Tt.OID=T.TrackTypeOID;'
#     res = srv.get(query, as_dict=False)
#     res = unique(res)
#     nprint(res)

def nprint(data):
    try:
        print json.dumps(data, indent=4, cls=MyEncoder, separators=(',', ': '))
    except:
        print str(data)


class MyEncoder(json.JSONEncoder):
    """encoder to handle special instances"""
    def default(self, obj):
        log = logging.getLogger(__name__)
        try:
            return str(obj)
        except:
            log.critical("error during string conversion in json.dump()")
        return json.JSONEncoder.default(self, obj)


###############################################################################
if __name__ == '__main__':
    test_connections()
    # test_packages()
    sys.exit(0)
