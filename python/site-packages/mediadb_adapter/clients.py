#!/usr/bin/env python2
"""Client module

Notes:
    clients to be used to communicate with the database
"""

import sys
import logging

logging.basicConfig(format='[%(levelname)s] %(name)s: %(message)s', level=logging.INFO)

_HOST = 'ch01sw71.corp.ads'
_USER = 'CORP\\11builddsp'
_PWD = 'desperado5'


###############################################################################
class MediaDatabase(object):

    """Main adapter for the MediaDB (AFM included)

    Attributes:
        adapter (str): adapter mode (mssql or odbc)
        log (logging.logger): logger instance
        server (pymssql.connect): pymssql connector
    """

    def __init__(self, database='MediaDB', host=_HOST, logger=None, adapter='odbc', key=None):
        """Initializer

        Args:
            database (str, optional): database name
            host (TYPE, optional): hostname
            logger (logging.logger, optional): logger instance
            adapter (str, optional): adapter type (odbc or mssql)

        Raises:
            ValueError: Description
        """
        self.log = logger or logging.getLogger(__name__ + '.' + self.__class__.__name__)
        self.adapter = adapter
        if self.adapter == 'odbc':
            import pyodbc
            cnc_str = "Driver={%s};Trusted_Connection=yes;Server=tcp:%s;database=%s"
            drivers = pyodbc.drivers()
            if 'ODBC Driver 13 for SQL Server' in drivers:
                driver = 'ODBC Driver 13 for SQL Server'
            elif 'SQL Server' in drivers:
                driver = 'SQL Server'
            else:
                raise ValueError('no supported ODBC driver found, check ODBC installation.')
            self.server = pyodbc.connect(cnc_str % (driver, host, database))
        elif self.adapter == 'mssql':
            import pymssql
            key = key.rstrip()
            key = key.split(':')
            print key
            self.server = pymssql.connect(host=host, user=key[0], password=key[1], database=database)
        else:
            raise ValueError('adapter mode "%s" not supported' % self.adapter)
        self.__server = host
        self.__database = database

    def __del__(self):
        """destructor
        """
        self.server.close()

    def test(self):
        """test connection using a query to a table

        Returns:
            boolean: connection result, True for success
        """
        self.log.debug("connection test using version query with adapter %s...", self.adapter)
        try:
            res = self.get('SELECT * FROM Package WHERE PackageID=\'179\'')  # 'SELECT Family FROM Version'
            if not res:
                self.log.critical('no results, database problem.')
                return False
            else:
                self.log.info('connection successful.')
                return True
        except:
            self.log.critical('connection not possible, check host/user/pwd configuration')
            return False

    def get(self, query, as_dict=True):
        """get data with a SQL query

        Args:
            query (str): SQL query
            as_dict (bool, optional): return result as list of dictionaries

        Returns:
            list: list of results
        """
        self.log.debug('using query "%s"', query)
        if self.adapter == 'odbc':
            res = self._get_odbc(query=query, as_dict=as_dict)
        elif self.adapter == 'mssql':
            res = self._get_odbc(query=query, as_dict=as_dict)
        return res

    def _get_odbc(self, query, as_dict=True):
        """get data with a SQL query using pyodbc

        Args:
            query (str): SQL query
            as_dict (bool, optional): return result as list of dictionaries

        Returns:
            list: list of results
        """
        with self.server.cursor() as cursor:
            cursor.execute(query)
            if as_dict:
                columns = [column[0] for column in cursor.description]
                res = []
                for row in cursor.fetchall():
                    res.append(dict(zip(columns, row)))
            else:
                res = cursor.fetchall()
        return res

    def _get_mssql(self, query, as_dict=True):
        """get data with a SQL query using pymssql

        Args:
            query (str): SQL query
            as_dict (bool, optional): return result as list of dictionaries

        Returns:
            list: list of results
        """
        with self.server.cursor(as_dict=as_dict) as cursor:
            cursor.execute(query)
            res = cursor.fetchall()
        return res


###############################################################################
if __name__ == '__main__':
    sys.exit(0)
