#!python
"""Serial-data abstraction tools

Notes:
    supported formats are: JSON

Todo:
    * add YAML support
"""

import sys
import json
import logging
import re

from .util import MyEncoder

###############################################################################
def read(filename):
    """read switch

    Args:
        filename (str): name of file to be load

    Returns:
        TYPE: data structure
    """
    log = logging.getLogger(__name__)
    if re.findall(r'.*\.json', filename):
        return read_json(filename)
    log.error('unknown data type')
    return None


def read_json(filename):
    """read json file

    Args:
        filename (str): name of file to be load

    Returns:
        TYPE: data structure
    """
    data = None
    with open(filename, 'r') as file_:
        data = json.load(file_)
    return data


def load(data, frmt='json'):
    """load str as data structure

    Args:
        data (str): str to be converted
        frmt (str, optional): data format (default ``json``)

    Returns:
        TYPE: data structure
    """
    log = logging.getLogger(__name__)
    if frmt == 'json':
        return json.loads(data)
    log.error('unknown data type')
    return None


def write(filename, data, pretty=False, sort_keys=True):
    """write switch

    Args:
        filename (str): name of file to be written
        data (TYPE): data structure to be written to file

    Returns:
        bool: write status (1 is success)
    """
    log = logging.getLogger(__name__)
    if re.findall(r'.*\.json', filename):
        write_json(filename, data, pretty, sort_keys)
        return True
    log.error('unknown data type')
    return False


def write_json(filename, data, pretty=False, sort_keys=True):
    """write json file

    Args:
        filename (str): name of file to be written
        data (TYPE): data structure to be written to file
    """
    if not pretty:
        with open(filename, 'w') as file_:
            json.dump(data, file_, indent=4)
    else:
        string = json.dumps(data, cls=MyEncoder, sort_keys=sort_keys, separators=(',', ': '))
        with open(filename, 'w') as file_:
            file_.write(string)


def dump(data, frmt='json', pretty=False):
    """dump switch

    Args:
        data (TYPE): data structure to be converted to str
        frmt (str, optional): data format (default ``json``)
        pretty (bool, optional): enable pretty-format

    Returns:
        str: serialized data
    """
    log = logging.getLogger(__name__)
    if frmt == 'json':
        return dump_json(data, pretty=pretty)
    log.error('unknown data type')
    return None


def dump_json(data, pretty=False):
    """dump data as str in json format

    Args:
        data (TYPE): data structure to be converted to str
        pretty (bool, optional): enable pretty-format

    Returns:
        str: serialized data
    """
    if not pretty:
        return json.dumps(data)
    try:
        return json.dumps(data, indent=4, cls=MyEncoder
                          sort_keys=True, separators=(',', ': '))
    except:
        return data


###############################################################################
if __name__ == '__main__':
    sys.exit(0)
